"use strict";

require("core-js/modules/es.array.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filter = void 0;

var _set2 = _interopRequireDefault(require("lodash/set"));

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _merge2 = _interopRequireDefault(require("lodash/merge"));

var _get2 = _interopRequireDefault(require("lodash/get"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const META_KEYS = ['info.browsertime.version', 'info.timestamp', 'info.url'];
const METRICS_KEYS = ['statistics.timings.firstPaint', 'statistics.timings.fullyLoaded', 'statistics.timings.pageTimings.backEndTime', 'statistics.timings.pageTimings.domContentLoadedTime', 'statistics.timings.pageTimings.domInteractiveTime', 'statistics.timings.pageTimings.domainLookupTime', 'statistics.timings.pageTimings.frontEndTime', 'statistics.timings.pageTimings.pageDownloadTime', 'statistics.timings.pageTimings.pageLoadTime', 'statistics.timings.pageTimings.redirectionTime', 'statistics.timings.pageTimings.serverConnectionTime', 'statistics.timings.pageTimings.serverResponseTime', 'statistics.timings.paintTiming.first-contentful-paint', 'statistics.timings.rumSpeedIndex', 'statistics.visualMetrics.FirstVisualChange', 'statistics.visualMetrics.LastVisualChange', 'statistics.visualMetrics.PerceptualSpeedIndex', 'statistics.visualMetrics.SpeedIndex', 'statistics.visualMetrics.VisualComplete85', 'statistics.visualMetrics.VisualComplete95', 'statistics.visualMetrics.VisualComplete99'];
/**
 * Filter Browsertime stats
 *
 *  @param {Object} browsertimeSource
 *  @return {import("../../types").BrowsertimeSource}
 */

const filter = browsertimeSource => {
  const meta = META_KEYS.reduce((agg, key) => {
    // Browsertime is proving an array of results
    const metaData = (0, _get2.default)(browsertimeSource, [0, ...key.split('.')], '');
    const filteredMetaData = (0, _set2.default)({}, key, metaData);
    return (0, _merge2.default)({}, agg, filteredMetaData);
  }, {});
  const metrics = METRICS_KEYS.reduce((agg, key) => {
    // Browsertime is proving an array of results
    const metricData = (0, _pick2.default)((0, _get2.default)(browsertimeSource, [0, ...key.split('.')], {}), ['median']);
    const filteredMetricData = (0, _set2.default)({}, key, metricData);
    return (0, _merge2.default)({}, agg, filteredMetricData);
  }, {});
  return _objectSpread({}, meta, {}, metrics);
};

exports.filter = filter;