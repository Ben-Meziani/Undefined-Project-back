"use strict";

require("core-js/modules/es.array.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createJob = void 0;

var _set2 = _interopRequireDefault(require("lodash/set"));

var _merge2 = _interopRequireDefault(require("lodash/merge"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _config = require("../config");

var _createSummary = require("./create-summary");

var webpack = _interopRequireWildcard(require("../webpack"));

var lighthouse = _interopRequireWildcard(require("../lighthouse"));

var browsertime = _interopRequireWildcard(require("../browsertime"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SOURCE_FNS = {
  webpack,
  lighthouse,
  browsertime
};
const GENERIC_PROPS = ['meta', 'insights', 'metrics'];
/*
 * Create job from stats
 */

const createJob = (source, baseline) => _config.SOURCE_PATHS.reduce((agg, sourcePath) => {
  const rawData = (0, _get2.default)(source, sourcePath);

  if (!rawData) {
    return agg;
  }

  const sourceModule = SOURCE_FNS[sourcePath];

  if (!sourceModule) {
    return agg;
  }

  const extractedData = sourceModule.extract(rawData, baseline);
  const summary = (0, _createSummary.createSummary)(SOURCE_FNS[sourcePath].SUMMARY_METRIC_PATHS, (0, _get2.default)(baseline, `metrics.${sourcePath}`, {}), (0, _get2.default)(extractedData, 'metrics', {}));
  return (0, _merge2.default)({}, agg, {
    rawData: (0, _set2.default)({}, sourcePath, rawData)
  }, {
    summary: (0, _set2.default)({}, sourcePath, summary)
  }, ...GENERIC_PROPS.map(genericPropName => ({
    [genericPropName]: (0, _set2.default)({}, sourcePath, extractedData[genericPropName])
  })));
}, {});

exports.createJob = createJob;