"use strict";

require("core-js/modules/es.array.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filter = void 0;

var _pick2 = _interopRequireDefault(require("lodash/pick"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Filter Lightouse source file
 *
 * @param {Object} source
 * @return {import('../../types').LighthouseSource}
 */
const filter = source => {
  // filter meta data
  const meta = (0, _pick2.default)(source, ['lighthouseVersion', 'fetchTime', 'requestedUrl']); // filter categories data

  const categories = Object.entries(source.categories).reduce((agg, [categoryId, categoryData]) => _objectSpread({}, agg, {
    [categoryId]: (0, _pick2.default)(categoryData, ['score'])
  }), {}); // filter audits

  const audits = Object.entries(source.audits).reduce((agg, [auditId, auditData]) => _objectSpread({}, agg, {
    [auditId]: (0, _pick2.default)(auditData, ['score', 'numericValue'])
  }), {});
  return _objectSpread({}, meta, {
    categories,
    audits
  });
};

exports.filter = filter;