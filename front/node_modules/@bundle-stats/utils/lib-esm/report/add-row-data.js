"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addRowData = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _metrics = require("../utils/metrics");

var _getMetricChanged = require("./get-metric-changed");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 *
 * Add row data
 *
 * @param {Object} row Row data
 * @param {string} row.key Row key (metric name / normalized file name)
 * @param {Object[]} row.runs Row metric runs
 * @param {number} row.runs.value Run metric value
 * @param {string} metricType Metric type
 *
 * @return {Object} Run with data
 */
const addRowData = (row, metricType) => {
  const {
    key,
    runs
  } = row; // Resolve row metric
  // - if the key is a predefined metric, use it
  // - if the key is not matching an existing metric, use the default metricType

  const metric = (0, _metrics.getGlobalMetricType)(key, typeof metricType === 'string' && metricType // explicit, avoid passing of map cb params
  );
  const {
    biggerIsBetter,
    label
  } = metric;
  const processedRuns = runs.map((run, index) => {
    if (!run || typeof run.value === 'undefined' || run.value === null) {
      return null;
    }

    const metricRunInfo = (0, _metrics.getMetricRunInfo)(metric, run.value, // Get baseline value only if not the latest run
    index + 1 < runs.length ? (0, _get2.default)(runs, [index + 1, 'value'], 0) : undefined);
    return _objectSpread({}, run, {}, metricRunInfo);
  });
  return _objectSpread({}, row, {
    // Metric props
    biggerIsBetter,
    label,
    // Row props
    changed: (0, _getMetricChanged.getMetricChanged)(runs),
    // Runs
    runs: processedRuns
  });
};

exports.addRowData = addRowData;