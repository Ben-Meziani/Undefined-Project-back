"use strict";

require("core-js/modules/es.array.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createReport = void 0;

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _config = require("../config");

var _metrics = require("../utils/metrics");

var webpack = _interopRequireWildcard(require("../webpack"));

var _package = require("../../package.json");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const createReport = jobs => {
  const insights = (0, _get2.default)(jobs, '[0].insights');

  const summary = _config.SOURCE_PATHS.reduce((agg, sourceId) => {
    const sourceSummary = (0, _get2.default)(jobs, [0, 'summary', sourceId]);

    if (!sourceSummary) {
      return agg;
    }

    const output = Object.entries(sourceSummary).map(([metricId, summaryData]) => {
      const metric = (0, _metrics.getGlobalMetricType)(`${sourceId}.${metricId}`);
      const {
        current = 0,
        baseline = 0
      } = summaryData;
      const info = (0, _metrics.getMetricRunInfo)(metric, current, baseline);
      return _objectSpread({
        label: metric.label
      }, info);
    });
    return _objectSpread({}, agg, {
      [sourceId]: output
    });
  }, {});

  return _objectSpread({
    createdAt: new Date().toISOString(),
    version: _package.version,
    runs: jobs.map(({
      internalBuildNumber,
      meta
    }) => _objectSpread({}, meta, {
      internalBuildNumber
    })),
    summary
  }, !(0, _isEmpty2.default)(insights) ? {
    insights
  } : {}, {}, webpack.compare(jobs));
};

exports.createReport = createReport;