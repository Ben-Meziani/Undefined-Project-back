"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDeltaType = exports.formatDelta = exports.getDelta = void 0;

var _round2 = _interopRequireDefault(require("lodash/round"));

var _delta = require("../config/delta");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getDelta = (baseline, current) => {
  const baselineValue = baseline && baseline.value || 0;
  const currentValue = current && current.value || 0;

  if (baselineValue === currentValue) {
    return {
      delta: 0,
      deltaPercentage: 0
    };
  }

  if (baselineValue === 0) {
    return {
      delta: currentValue,
      deltaPercentage: 100
    };
  }

  return {
    delta: currentValue - baselineValue,
    deltaPercentage: (0, _round2.default)(currentValue / baselineValue * 100 - 100, 8)
  };
};
/**
 * Format delta output
 *
 * @param {number} value Metric value
 * @param {Function} formatter Metric type formatter
 * @return {String} Delta output
 */


exports.getDelta = getDelta;

const formatDelta = (value, formatter) => {
  // eslint-disable-next-line no-nested-ternary
  let sign = value > 0 ? '+' : value < 0 ? '-' : '';
  let absValue = Math.abs(value);

  if (absValue > 0 && absValue < 0.01) {
    sign = `~${sign}`;
    absValue = 0.01;
  }

  if (absValue > 0.01) {
    absValue = (0, _round2.default)(absValue, 2);
  }

  return `${sign}${formatter(absValue)}`;
};
/**
 *
 * Get delta type
 *
 * @param {number} deltaValue Delta value
 * @param {Boolean} biggerIsBetter Metric flag
 * @return {string} Delta type
 */


exports.formatDelta = formatDelta;

const getDeltaType = (deltaValue, biggerIsBetter) => {
  if (deltaValue === 0) {
    return _delta.DELTA_TYPE_NO_CHANGE;
  }

  const absDiff = Math.abs(deltaValue);
  let level = '';

  if (absDiff <= 5) {
    level = _delta.DELTA_TYPE_LEVEL_LOW;
  }

  if (absDiff > 50) {
    level = _delta.DELTA_TYPE_LEVEL_HIGH;
  }

  let type = '';

  if (deltaValue > 0 && biggerIsBetter || deltaValue < 0 && !biggerIsBetter) {
    type = _delta.DELTA_TYPE_POSITIVE;
  } else {
    type = _delta.DELTA_TYPE_NEGATIVE;
  }

  return `${level ? `${level}_` : ''}${type}`;
};

exports.getDeltaType = getDeltaType;