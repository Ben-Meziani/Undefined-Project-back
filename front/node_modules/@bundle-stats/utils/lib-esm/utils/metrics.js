"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMetricRunInfo = exports.getGlobalMetricType = exports.createGetMetricType = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _metrics = require("../config/metrics");

var _delta = require("./delta");

var _format = require("./format");

var _metrics2 = require("../webpack/metrics");

var _metrics3 = require("../lighthouse/metrics");

var _metrics4 = require("../browsertime/metrics");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Create getMetricTypes handler
 *
 * @param {Object} metrics
 * @return {Function}
 */
const createGetMetricType = metrics =>
/**
 * Get metric type data
 *
 * @param {String} key Metric key
 * @param {String} [type] Default metric type
 * @return {import('../../types').MetricType}
 */
// eslint-disable-next-line implicit-arrow-linebreak
(key, type) => {
  /** @type {import('../../types').MetricTypeConfig} */
  const metric = (0, _get2.default)(metrics, key);

  if (metric && metric.type) {
    return _objectSpread({}, _metrics.METRIC_TYPES[metric.type], {}, metric);
  }

  const resolvedType = type || _metrics.METRIC_TYPE_NUMERIC;
  return _objectSpread({}, _metrics.METRIC_TYPES[resolvedType], {
    type: resolvedType,
    label: key
  });
};
/**
 * Get global metric type
 *
 * @param {String} key Metric key
 * @param {import('../../types').MetricTypeType} [type] Default metric type
 * @return {import('../../types').MetricType}
 */


exports.createGetMetricType = createGetMetricType;
const getGlobalMetricType = createGetMetricType({
  webpack: _metrics2.metrics,
  lighthouse: _metrics3.metrics,
  browsertime: _metrics4.metrics
});
/**
 *
 * Get metric information
 *
 * @param {import('../../types').MetricType} metric Metric data
 * @param {number} currentValue Current value
 * @param {number} baselineValue Baseline value
 *
 * @return {import('../../types').MetricRunInfo}
 */

exports.getGlobalMetricType = getGlobalMetricType;

const getMetricRunInfo = (metric, currentValue, baselineValue) => {
  const {
    formatter,
    biggerIsBetter
  } = metric;
  const runInfo = {
    value: currentValue,
    displayValue: formatter(currentValue)
  };

  if (typeof baselineValue === 'undefined') {
    return runInfo;
  }

  const {
    delta,
    deltaPercentage
  } = (0, _delta.getDelta)({
    value: baselineValue
  }, {
    value: currentValue
  });
  return _objectSpread({}, runInfo, {
    delta,
    deltaPercentage,
    displayDelta: (0, _delta.formatDelta)(delta, formatter),
    displayDeltaPercentage: (0, _delta.formatDelta)(deltaPercentage, _format.formatPercentage),
    deltaType: (0, _delta.getDeltaType)(deltaPercentage, biggerIsBetter)
  });
};

exports.getMetricRunInfo = getMetricRunInfo;