"use strict";

require("core-js/modules/es.array.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractModulesPackagesDuplicate = void 0;

var _set2 = _interopRequireDefault(require("lodash/set"));

var _last2 = _interopRequireDefault(require("lodash/last"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _find2 = _interopRequireDefault(require("lodash/find"));

var _config = require("../../config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const extractModulesPackagesDuplicate = (webpackStats, currentExtractedData) => {
  const data = (0, _get2.default)(currentExtractedData, 'metrics.packages', {});
  const packages = Object.keys(data).map(path => ({
    name: (0, _last2.default)(path.split(_config.PACKAGES_SEPARATOR)),
    path
  }));
  const {
    value,
    paths
  } = packages.reduce((agg, {
    name,
    path
  }, index) => {
    if (index === 0) {
      return agg;
    }

    const foundDuplicatePackage = (0, _find2.default)(packages.slice(0, index), {
      name
    });

    if (foundDuplicatePackage) {
      return {
        paths: _objectSpread({}, agg.paths, {
          [name]: [...(agg.paths[name] ? agg.paths[name] : []), // Include prev duplicate package path if missing
          ...(agg.paths[name] && agg.paths[name].includes(foundDuplicatePackage.path) ? [] : [foundDuplicatePackage.path]), path]
        }),
        value: agg.value + 1
      };
    }

    return agg;
  }, {
    paths: {},
    value: 0
  });
  return {
    insights: _objectSpread({}, !(0, _isEmpty2.default)(paths) ? (0, _set2.default)({}, 'duplicatePackages', {
      type: _config.INSIGHT_WARNING,
      data: paths
    }) : {}),
    metrics: {
      duplicatePackagesCount: {
        value
      }
    }
  };
};

exports.extractModulesPackagesDuplicate = extractModulesPackagesDuplicate;