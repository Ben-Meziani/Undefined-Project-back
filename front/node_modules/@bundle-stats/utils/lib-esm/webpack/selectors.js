"use strict";

require("core-js/modules/es.array.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectors = void 0;

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _constants = require("./constants");

var _metrics = require("./metrics");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 *
 * Get stats metrics
 *
 * @param {Object} job Job data
 * @param {Object} job.metrics Job metrics
 * @param {Object} job.metrics.webpack Job webpack metrics
 *
 * @return {Object} Webpack stats metrics
 */
const getStatsMetrics = job => {
  const data = (0, _get2.default)(job, 'metrics.webpack');
  const metrics = (0, _pick2.default)(data, _constants.SUMMARY_METRIC_PATHS); // Rename metric keys

  return Object.entries(metrics).reduce((agg, [key, value]) => _objectSpread({}, agg, {
    [`webpack.${key}`]: value
  }), {});
};
/**
 *
 * Get size metrics
 *
 * @param {Object} job Job data
 * @param {Object} job.metrics Job metrics
 * @param {Object} job.metrics.webpack Job webpack metrics
 * @param {Object} job.metrics.webpack.sizes Job webpack size metrics
 *
 * @return {Object} Webpack size metrics
 */


const getSizeMetrics = job => {
  const metrics = (0, _get2.default)(job, 'metrics.webpack.sizes', {}); // List metrics by the metrics list

  return Object.keys(_metrics.metrics.sizes).reduce((agg, key) => _objectSpread({}, agg, {
    [`webpack.sizes.${key}`]: metrics[key]
  }), {});
};
/**
 *
 * Get asset metrics
 *
 * @param {Object} job Job data
 * @param {Object} job.metrics Job metrics
 * @param {Object} job.metrics.webpack Job webpack metrics
 * @param {Object} job.metrics.webpack.assets Job webpack asset metrics
 *
 * @return {Object} Webpack asset metrics
 */


const getAssetsMetrics = job => (0, _get2.default)(job, 'metrics.webpack.assets', {});
/**
 *
 * Get module metrics
 *
 * @param {Object} job Job data
 * @param {Object} job.metrics Job metrics
 * @param {Object} job.metrics.webpack Job webpack metrics
 * @param {Object} job.metrics.webpack.modules Job webpack module metrics
 *
 * @return {Object} Webpack module metrics
 */


const getModulesMetrics = job => (0, _get2.default)(job, 'metrics.webpack.modules', {});
/**
 *
 * Get package metrics
 *
 * @param {Object} job Job data
 * @param {Object} job.metrics Job metrics
 * @param {Object} job.metrics.webpack Job webpack metrics
 * @param {Object} job.metrics.webpack.packages Job webpack package metrics
 *
 * @return {Object} Webpack package metrics
 */


const getPackageMetrics = job => (0, _get2.default)(job, 'metrics.webpack.packages', {});

const selectors = {
  [_constants.SECTION_WEBPACK_STATS]: getStatsMetrics,
  [_constants.SECTION_WEBPACK_SIZES]: getSizeMetrics,
  [_constants.SECTION_WEBPACK_ASSETS]: getAssetsMetrics,
  [_constants.SECTION_WEBPACK_MODULES]: getModulesMetrics,
  [_constants.SECTION_WEBPACK_PACKAGES]: getPackageMetrics
};
exports.selectors = selectors;