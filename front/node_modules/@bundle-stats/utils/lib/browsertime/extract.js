"use strict";

require("core-js/modules/es.array.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extract = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const METRICS = {
  firstPaint: 'statistics.timings.firstPaint',
  fullyLoaded: 'statistics.timings.fullyLoaded',
  backEndTime: 'statistics.timings.pageTimings.backEndTime',
  domContentLoadedTime: 'statistics.timings.pageTimings.domContentLoadedTime',
  domInteractiveTime: 'statistics.timings.pageTimings.domInteractiveTime',
  domainLookupTime: 'statistics.timings.pageTimings.domainLookupTime',
  frontEndTime: 'statistics.timings.pageTimings.frontEndTime',
  pageDownloadTime: 'statistics.timings.pageTimings.pageDownloadTime',
  pageLoadTime: 'statistics.timings.pageTimings.pageLoadTime',
  redirectionTime: 'statistics.timings.pageTimings.redirectionTime',
  serverConnectionTime: 'statistics.timings.pageTimings.serverConnectionTime',
  serverResponseTime: 'statistics.timings.pageTimings.serverResponseTime',
  firstContentfulPaint: 'statistics.timings.paintTiming.first-contentful-paint',
  rumSpeedIndex: 'statistics.timings.rumSpeedIndex',
  firstVisualChange: 'statistics.visualMetrics.FirstVisualChange',
  lastVisualChange: 'statistics.visualMetrics.LastVisualChange',
  perceptualSpeedIndex: 'statistics.visualMetrics.PerceptualSpeedIndex',
  speedIndex: 'statistics.visualMetrics.SpeedIndex',
  visualComplete85: 'statistics.visualMetrics.VisualComplete85',
  visualComplete95: 'statistics.visualMetrics.VisualComplete95',
  visualComplete99: 'statistics.visualMetrics.VisualComplete99'
};
/**
 *
 * Extract metrics from Browsertime stats
 *
 * @param {import("../../types").BrowsertimeSource} browsertimeSource
 *
 * @typedef {Object} BrowsertimeMetricsRes
 * @property {import("../../types").BrowsertimeMetrics} metrics
 *
 * @return @BrowsertimeMetricsRes
 */

const extract = browsertimeSource => {
  const metrics = Object.entries(METRICS).reduce((agg, [key, browsertimeKey]) => _objectSpread({}, agg, {
    [key]: {
      value: (0, _get2.default)(browsertimeSource, [...browsertimeKey.split('.'), 'median'], 0)
    }
  }), {});
  return {
    metrics
  };
};

exports.extract = extract;