"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatTime = exports.formatDate = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const navigatorLanguages = typeof navigator !== 'undefined' && navigator.languages || 'en';

const formatDate = value => {
  const date = typeof value === 'string' ? new Date(value) : value;
  return new Intl.DateTimeFormat(navigatorLanguages, {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  }).format(date);
};

exports.formatDate = formatDate;

const formatTime = value => {
  const date = typeof value === 'string' ? new Date(value) : value;
  return new Intl.DateTimeFormat(navigatorLanguages, _objectSpread({}, process.env.NODE_ENV !== 'test' && {
    hour: '2-digit'
  }, {
    minute: '2-digit',
    second: '2-digit'
  })).format(date);
};

exports.formatTime = formatTime;