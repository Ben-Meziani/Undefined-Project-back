"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compare = exports.compareBySection = void 0;

var _uniq2 = _interopRequireDefault(require("lodash/uniq"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _flatMap2 = _interopRequireDefault(require("lodash/flatMap"));

var _metrics = require("../config/metrics");

var _addRowData = require("../report/add-row-data");

var _mergeMetricsByKey = require("../report/merge-metrics-by-key");

var _compareMetrics = require("../report/compare-metrics");

var _constants = require("./constants");

var _selectors = require("./selectors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Compare stats metrics
 *
 * @param {Object[]} jobs - List of jobs to compare
 *
 * @return {Object[]} Compared stats metrics
 */
const compareStats = jobs => (0, _compareMetrics.compareMetrics)(jobs, _selectors.selectors.stats);
/**
 * Compare size metrics
 *
 * @param {Object[]} jobs - List of jobs to compare
 *
 * @return {Object[]} Compared size metrics
 */


const compareSizes = jobs => (0, _compareMetrics.compareMetrics)(jobs, _selectors.selectors.sizes);
/**
 * Compare asset metrics
 *
 * @param {Object[]} jobs - List of jobs to compare
 *
 * @return {Object[]} Compared asset metrics
 */


const compareAssets = jobs => (0, _compareMetrics.compareMetrics)(jobs, _selectors.selectors.assets, _metrics.METRIC_TYPE_FILE_SIZE);
/**
 * Compare modules
 *
 * @param {Object[]} jobs - List of jobs to compare
 *
 * @return {Object[]} Compared module metrics by chunk Id
 */


const compareModules = jobs => {
  const jobsModuleMetrics = jobs.map(_selectors.selectors.modules);
  const allChunkIds = (0, _uniq2.default)((0, _flatMap2.default)(jobsModuleMetrics, jobModuleMetrics => Object.keys(jobModuleMetrics)));
  return allChunkIds.map(chunkId => {
    const jobsChunk = (0, _map2.default)(jobsModuleMetrics, chunkId);
    const chunkNames = (0, _uniq2.default)((0, _flatMap2.default)(jobsChunk, 'chunkNames'));
    const modules = (0, _mergeMetricsByKey.mergeMetricsByKey)((0, _map2.default)(jobsChunk, 'modules')).map(row => (0, _addRowData.addRowData)(row, _metrics.METRIC_TYPE_FILE_SIZE));
    return {
      chunkId,
      chunkNames,
      modules
    };
  });
};
/**
 * Compare package metrics
 *
 * @param {Object[]} jobs - List of jobs to compare
 *
 * @return {Object[]} Compared package metrics
 */


const comparePackages = jobs => (0, _compareMetrics.compareMetrics)(jobs, _selectors.selectors.packages, _metrics.METRIC_TYPE_FILE_SIZE);

const compareBySection = {
  [_constants.SECTION_WEBPACK_STATS]: compareStats,
  [_constants.SECTION_WEBPACK_SIZES]: compareSizes,
  [_constants.SECTION_WEBPACK_ASSETS]: compareAssets,
  [_constants.SECTION_WEBPACK_MODULES]: compareModules,
  [_constants.SECTION_WEBPACK_PACKAGES]: comparePackages
};
/**
 * Compare webpack sections
 *
 * @param {Object[]} jobs - List of jobs to compare
 * @return {Object} Compared metrics by section
 */

exports.compareBySection = compareBySection;

const compare = jobs => _constants.SECTIONS.reduce((agg, sectionId) => _objectSpread({}, agg, {
  [sectionId]: compareBySection[sectionId](jobs)
}), {});

exports.compare = compare;