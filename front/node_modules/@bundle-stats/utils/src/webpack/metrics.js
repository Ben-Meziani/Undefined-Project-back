import { METRIC_TYPE_FILE_SIZE, METRIC_TYPE_NUMERIC, METRIC_TYPE_PERCENTAGE } from '../config/metrics';

export const metrics = {
  totalSizeByTypeALL: {
    label: 'Total Bundle Size',
    description: 'Sum of all assets.',
    type: METRIC_TYPE_FILE_SIZE,
  },
  totalInitialSizeJS: {
    label: 'Initial JS Size',
    description: 'Sum of all JS assets that are loaded initially(eg: `vendor.js`, `app.js`).',
    type: METRIC_TYPE_FILE_SIZE,
  },
  totalInitialSizeCSS: {
    label: 'Initial CSS Size',
    description: 'Sum of all CSS assets that are loaded initially(eg: `vendor.css`, `app.css`).',
    type: METRIC_TYPE_FILE_SIZE,
  },
  cacheInvalidation: {
    label: 'Cache Invalidation',
    description: 'Ratio between the total of changed assets and the total bundle size.',
    type: METRIC_TYPE_PERCENTAGE,
    biggerIsBetter: false,
  },
  moduleCount: {
    label: 'Module Count',
    description: 'Total number of modules bundled by webpack.',
    type: METRIC_TYPE_NUMERIC,
    biggerIsBetter: false,
  },
  chunkCount: {
    label: 'Chunk Count',
    description: 'Total number of chunks generated by webpack.',
    type: METRIC_TYPE_NUMERIC,
    biggerIsBetter: false,
  },
  assetCount: {
    label: 'Asset Count',
    description: 'Total number of assets outputted by webpack.',
    type: METRIC_TYPE_NUMERIC,
    biggerIsBetter: false,
  },
  packageCount: {
    label: 'Package Count',
    description: 'Total number of packages bundled by webpack.',
    type: METRIC_TYPE_NUMERIC,
    biggerIsBetter: false,
  },
  duplicatePackagesCount: {
    label: 'Duplicate Packages Count',
    description: 'Total number of packages that are duplicated.',
    type: METRIC_TYPE_NUMERIC,
    biggerIsBetter: false,
  },
  sizes: {
    totalSizeByTypeJS: {
      label: 'JS',
      type: METRIC_TYPE_FILE_SIZE,
    },
    totalSizeByTypeCSS: {
      label: 'CSS',
      type: METRIC_TYPE_FILE_SIZE,
    },
    totalSizeByTypeIMG: {
      label: 'IMG',
      type: METRIC_TYPE_FILE_SIZE,
    },
    totalSizeByTypeMEDIA: {
      label: 'Media',
      type: METRIC_TYPE_FILE_SIZE,
    },
    totalSizeByTypeFONT: {
      label: 'Fonts',
      type: METRIC_TYPE_FILE_SIZE,
    },
    totalSizeByTypeHTML: {
      label: 'HTML',
      type: METRIC_TYPE_FILE_SIZE,
    },
    totalSizeByTypeOTHER: {
      label: 'Other',
      type: METRIC_TYPE_FILE_SIZE,
    },
  },
};
